Parameters:
  GitHubUser:
    Type: string
    DefaultValue: ''
  GitHubRepo:
    Type: string
    DefaultValue: ''
  GitHubBranch:
    Type: string
    DefaultValue: ''
  GitHubToken:
    Type: string
    DefaultValue: ''
Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-artifacts'
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodeBuild'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              # Login to ECR
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              # Publish to ECR
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource:
                  # TODO: paramenterize pm=test => ImageName
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-containerimage'
              # Write build logs
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  # TODO: paramenterize pm=test => ProjectName
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - kms:*
                Resource:
                  - !Sub ${MyKey.Arn}
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/db/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/app/*'
  CodeBuildArtifact:
    Type: AWS::CodeBuild::Project
    DependsOn: [CodeBuildRole]
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      Description: A description about my project
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        # Info: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # List of Build Environments
        # http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html
        Image: aws/codebuild/nodejs:7.0.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - echo Build Artifact with only the NodeJS demo files that are needed
                - cd portfolio/cloudplatform/ubuntu/node-sql/app/
                - echo Install NodeJS dependencies...
                - npm install --only=prod
          artifacts:
            files:
              - '**/*' # All files recursively within the app directory
            base-directory: portfolio/cloudplatform/ubuntu/node-sql/app/
      TimeoutInMinutes: 300  # 5min
      EncryptionKey: !Sub '${MyKey.Arn}'
  CFDeployerRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactBucket
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-cfdeployer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-cfdeployer-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:GetRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:PassRole
                  - iam:DeleteRolePolicy
                  - cloudformation:*
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
  CodePipeLineRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactBucket
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - iam:ListRoles
                  - cloudformation:*
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - iam:PassRole
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-policy'
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: [CodePipeLineRole, CodeBuildLambda, CFDeployerRole]
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Name: !Ref AWS::StackName
      Stages:
        - Name: Source
          Actions:
            - Name: AppCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Build-And-Deploy-WebApp
          Actions:
            - Name: build-web-app
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildArtifact
              RunOrder: 1
              InputArtifacts:
                - Name: Source
            # - Name: deploy-web-app
            #   ActionTypeId:
            #     Category: Build
            #     Owner: AWS
            #     Version: 1
            #     Provider: CodeBuild
            #   Configuration:
            #     ProjectName: !Ref CodeBuildRelease
            #   RunOrder: 2
            #   InputArtifacts:
            #     - Name: Source
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
